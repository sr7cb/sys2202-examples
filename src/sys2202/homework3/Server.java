package sys2202.homework3;

import java.io.File;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Properties;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;

public class Server {

	/**
	 * The purpose of this method is to process an XML file that contains
	 * location data generated by a smartphone. The specific processing that is
	 * performed is to convert the XML file to JSON and write the JSON to a new
	 * file for long-term storage.
	 * 
	 * @param xmlFile File to process.
	 * @throws Exception
	 */
	public void processXmlFile(File xmlFile) throws Exception {

		// Read the method comment above to understand what we're trying to do here.
		
		// Start a JSON file. We're going to write location data to this file
		// after we extract the location data from the XML file that has been
		// passed into this method.
		DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
		documentBuilderFactory.setValidating(true);
		DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
		Document parsedXml = documentBuilder.parse(xmlFile);
		NodeList nl = parsedXml.getElementsByTagName("*");
		
		Class.forName("org.postgresql.Driver");
		
		// Host:  The host is "localhost" if you installed PostgreSQL on your machine.
		String host = "localhost";
		
		// Port:  Obtain the port from within PgAdmin (right-click the server and select the Connection tab). Yours may differ from what is used below.
		int port = 5432; 
		
		// Database:  Enter the database you wish to work with (also shown within PgAdmin).
		String database = "postgres";
		
		// Form the connection URL.
		String url = "jdbc:postgresql://" + host + ":" + port  + "/" + database;
		
		// Open the connection to the PostgreSQL server. Be sure to enter your password below.
		Properties props = new Properties();
		props.setProperty("user","postgres");
		props.setProperty("password","pgAdmin3");
		props.setProperty("ssl","false");
		Connection connection = DriverManager.getConnection(url, props);
		
		// Execute an SQL INSERT statement on the PostgreSQL server. This statement inserts two rows into the fruit table.
		Statement insert = connection.createStatement();
		for(int i = 0; i < nl.getLength(); i++){
			Element el = (Element)nl.item(i);
			if(el.getNodeName().contains("LocationDatum")){
				insert.execute("INSERT INTO data.location_table\n (latitude, longitude, accuracy, deviceId, time_stamp)\n VALUES" 
			+"(" + el.getElementsByTagName("latitude").item(0).getTextContent() + "," +
						el.getElementsByTagName("longitude").item(0).getTextContent() + "," +
						el.getElementsByTagName("accuracy").item(0).getTextContent() + ", " + "'" +
						el.getElementsByTagName("deviceId").item(0).getTextContent() +  "'" + ", " + "'" +
						el.getElementsByTagName("timestamp").item(0).getTextContent() + "'" + ");");
			}
		}
		for(int i = 0; i < nl.getLength(); i++){
			Element el = (Element)nl.item(i);
			if(el.getNodeName().contains("AccelerometerDatum")){
				insert.execute("INSERT INTO data.accelerometer_table \n (X, Y, Z, deviceId, time_stamp)\n VALUES" +
			"(" + el.getElementsByTagName("X").item(0).getTextContent() + "," +
				el.getElementsByTagName("Y").item(0).getTextContent() + ", " +
				el.getElementsByTagName("Z").item(0).getTextContent() +  ", " + "'" +
				el.getElementsByTagName("deviceId").item(0).getTextContent() +  "'" + ", " + "'" +
				el.getElementsByTagName("timestamp").item(0).getTextContent() + "'" + ");");
			}
		}
		insert.close();
	}
}